/*
 * generated by Xtext 2.32.0-SNAPSHOT
 */
parser grammar InternalXpectParser;

options {
	tokenVocab=InternalXpectLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.eclipse.xpect.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xpect.services.XpectGrammarAccess;

}

@members {

 	private XpectGrammarAccess grammarAccess;

    public InternalXpectParser(TokenStream input, XpectGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "XpectFile";
   	}

   	@Override
   	protected XpectGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleXpectFile
entryRuleXpectFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpectFileRule()); }
	iv_ruleXpectFile=ruleXpectFile
	{ $current=$iv_ruleXpectFile.current; }
	EOF;

// Rule XpectFile
ruleXpectFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXpectFileAccess().getXpectFileAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getXpectFileAccess().getMembersTextParserRuleCall_1_0_0_0());
						}
						lv_members_1_0=ruleText
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXpectFileRule());
							}
							add(
								$current,
								"members",
								lv_members_1_0,
								"org.eclipse.xpect.Xpect.Text");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getXpectFileAccess().getMembersMemberParserRuleCall_1_0_1_0());
						}
						lv_members_2_0=ruleMember
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXpectFileRule());
							}
							add(
								$current,
								"members",
								lv_members_2_0,
								"org.eclipse.xpect.Xpect.Member");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getXpectFileAccess().getMembersTextParserRuleCall_1_1_0());
					}
					lv_members_3_0=ruleText
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXpectFileRule());
						}
						add(
							$current,
							"members",
							lv_members_3_0,
							"org.eclipse.xpect.Xpect.Text");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	iv_ruleMember=ruleMember
	{ $current=$iv_ruleMember.current; }
	EOF;

// Rule Member
ruleMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMemberAccess().getLexicalspace_SetupParserRuleCall_0());
		}
		this_Lexicalspace_Setup_0=ruleLexicalspace_Setup
		{
			$current = $this_Lexicalspace_Setup_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMemberAccess().getLexicalspace_InvocationParserRuleCall_1());
		}
		this_Lexicalspace_Invocation_1=ruleLexicalspace_Invocation
		{
			$current = $this_Lexicalspace_Invocation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMemberAccess().getXpectIgnoreParserRuleCall_2());
		}
		this_XpectIgnore_2=ruleXpectIgnore
		{
			$current = $this_XpectIgnore_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleText
entryRuleText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	iv_ruleText=ruleText
	{ $current=$iv_ruleText.current; }
	EOF;

// Rule Text
ruleText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getTextAccess().getTextAnyTextParserRuleCall_0());
			}
			lv_text_0_0=ruleAnyText
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getTextRule());
				}
				set(
					$current,
					"text",
					lv_text_0_0,
					"org.eclipse.xpect.Xpect.AnyText");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleLexicalspace_Setup
entryRuleLexicalspace_Setup returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getLexicalspace_SetupRule()); }
	iv_ruleLexicalspace_Setup=ruleLexicalspace_Setup
	{ $current=$iv_ruleLexicalspace_Setup.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Lexicalspace_Setup
ruleLexicalspace_Setup returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLexicalspace_SetupAccess().getXpectTestAction_0(),
					$current);
			}
		)
		otherlv_1=XPECT_SETUP
		{
			newLeafNode(otherlv_1, grammarAccess.getLexicalspace_SetupAccess().getXPECT_SETUPKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLexicalspace_SetupRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getLexicalspace_SetupAccess().getDeclaredSuiteJvmDeclaredTypeCrossReference_2_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLexicalspace_SetupAccess().getAssignmentsAssignmentParserRuleCall_3_0());
				}
				lv_assignments_3_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLexicalspace_SetupRule());
					}
					add(
						$current,
						"assignments",
						lv_assignments_3_0,
						"org.eclipse.xpect.Xpect.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=END_SETUP
		{
			newLeafNode(otherlv_4, grammarAccess.getLexicalspace_SetupAccess().getEND_SETUPKeyword_4());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssignmentRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getDeclaredTargetJvmOperationCrossReference_0_0_0());
					}
				)
			)
			otherlv_1=EqualsSign
			{
				newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_0_2_0());
					}
					lv_value_2_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"org.eclipse.xpect.Xpect.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getValueComponentLongParserRuleCall_1_0());
				}
				lv_value_3_0=ruleComponentLong
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xpect.Xpect.ComponentLong");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getLiteralParserRuleCall_0());
		}
		this_Literal_0=ruleLiteral
		{
			$current = $this_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getClassLiteralParserRuleCall_1());
		}
		this_ClassLiteral_1=ruleClassLiteral
		{
			$current = $this_ClassLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getComponentInlineParserRuleCall_2());
		}
		this_ComponentInline_2=ruleComponentInline
		{
			$current = $this_ComponentInline_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleComponentLong
entryRuleComponentLong returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentLongRule()); }
	iv_ruleComponentLong=ruleComponentLong
	{ $current=$iv_ruleComponentLong.current; }
	EOF;

// Rule ComponentLong
ruleComponentLong returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getComponentLongAccess().getComponentAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentLongRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getComponentLongAccess().getComponentClassJvmDeclaredTypeCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentLongAccess().getParametersLiteralParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentLongRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.eclipse.xpect.Xpect.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_3=LeftCurlyBracket
			{
				newLeafNode(otherlv_3, grammarAccess.getComponentLongAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComponentLongAccess().getAssignmentsAssignmentParserRuleCall_3_1_0());
					}
					lv_assignments_4_0=ruleAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComponentLongRule());
						}
						add(
							$current,
							"assignments",
							lv_assignments_4_0,
							"org.eclipse.xpect.Xpect.Assignment");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_5=RightCurlyBracket
			{
				newLeafNode(otherlv_5, grammarAccess.getComponentLongAccess().getRightCurlyBracketKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleComponentInline
entryRuleComponentInline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentInlineRule()); }
	iv_ruleComponentInline=ruleComponentInline
	{ $current=$iv_ruleComponentInline.current; }
	EOF;

// Rule ComponentInline
ruleComponentInline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getComponentInlineAccess().getComponentAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getComponentInlineRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getComponentInlineAccess().getComponentClassJvmDeclaredTypeCrossReference_1_0_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComponentInlineAccess().getParametersLiteralParserRuleCall_1_1_0());
					}
					lv_parameters_2_0=ruleLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComponentInlineRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"org.eclipse.xpect.Xpect.Literal");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			otherlv_3=LeftCurlyBracket
			{
				newLeafNode(otherlv_3, grammarAccess.getComponentInlineAccess().getLeftCurlyBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getComponentInlineAccess().getAssignmentsAssignmentParserRuleCall_2_1_0());
					}
					lv_assignments_4_0=ruleAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComponentInlineRule());
						}
						add(
							$current,
							"assignments",
							lv_assignments_4_0,
							"org.eclipse.xpect.Xpect.Assignment");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_5=RightCurlyBracket
			{
				newLeafNode(otherlv_5, grammarAccess.getComponentInlineAccess().getRightCurlyBracketKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralAccess().getBooleanLiteralAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_1_0=True
						{
							newLeafNode(lv_value_1_0, grammarAccess.getLiteralAccess().getValueTrueKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLiteralRule());
							}
							setWithLastConsumed($current, "value", lv_value_1_0 != null, "true");
						}
					)
				)
				    |
				otherlv_2=False
				{
					newLeafNode(otherlv_2, grammarAccess.getLiteralAccess().getFalseKeyword_0_1_1());
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralAccess().getIntLiteralAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_4_0=RULE_INT
					{
						newLeafNode(lv_value_4_0, grammarAccess.getLiteralAccess().getValueINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_4_0,
							"org.eclipse.xpect.Xpect.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralAccess().getStringLiteralAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_6_0=RULE_STRING
					{
						newLeafNode(lv_value_6_0, grammarAccess.getLiteralAccess().getValueSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_6_0,
							"org.eclipse.xpect.Xpect.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleClassLiteral
entryRuleClassLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassLiteralRule()); }
	iv_ruleClassLiteral=ruleClassLiteral
	{ $current=$iv_ruleClassLiteral.current; }
	EOF;

// Rule ClassLiteral
ruleClassLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getClassLiteralAccess().getClassLiteralAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassLiteralRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getClassLiteralAccess().getTypeJvmDeclaredTypeCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleXpectIgnore
entryRuleXpectIgnore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXpectIgnoreRule()); }
	iv_ruleXpectIgnore=ruleXpectIgnore
	{ $current=$iv_ruleXpectIgnore.current; }
	EOF;

// Rule XpectIgnore
ruleXpectIgnore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXpectIgnoreAccess().getXpectIgnoreAction_0(),
					$current);
			}
		)
		otherlv_1=XPECT_IGNORE
		{
			newLeafNode(otherlv_1, grammarAccess.getXpectIgnoreAccess().getXPECT_IGNOREKeyword_1());
		}
	)
;

// Entry rule entryRuleLexicalspace_Invocation
entryRuleLexicalspace_Invocation returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getLexicalspace_InvocationRule()); }
	iv_ruleLexicalspace_Invocation=ruleLexicalspace_Invocation
	{ $current=$iv_ruleLexicalspace_Invocation.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule Lexicalspace_Invocation
ruleLexicalspace_Invocation returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=XPECT
		{
			newLeafNode(otherlv_0, grammarAccess.getLexicalspace_InvocationAccess().getXPECTKeyword_0());
		}
		(
			(
				lv_ignore_1_0=ExclamationMark
				{
					newLeafNode(lv_ignore_1_0, grammarAccess.getLexicalspace_InvocationAccess().getIgnoreExclamationMarkKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLexicalspace_InvocationRule());
					}
					setWithLastConsumed($current, "ignore", lv_ignore_1_0 != null, "!");
				}
			)
		)?
		(
			(
				lv_fixme_2_0=FIXME
				{
					newLeafNode(lv_fixme_2_0, grammarAccess.getLexicalspace_InvocationAccess().getFixmeFIXMEKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLexicalspace_InvocationRule());
					}
					setWithLastConsumed($current, "fixme", lv_fixme_2_0 != null, "FIXME");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLexicalspace_InvocationRule());
					}
				}
				otherlv_3=RULE_INVOCATION
				{
					newLeafNode(otherlv_3, grammarAccess.getLexicalspace_InvocationAccess().getMethodXjmXpectMethodCrossReference_3_0());
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleAnyText
entryRuleAnyText returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAnyTextRule()); }
	iv_ruleAnyText=ruleAnyText
	{ $current=$iv_ruleAnyText.current.getText(); }
	EOF;

// Rule AnyText
ruleAnyText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ANY_OTHER_0=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_0);
		}
		{
			newLeafNode(this_ANY_OTHER_0, grammarAccess.getAnyTextAccess().getANY_OTHERTerminalRuleCall());
		}
	)+
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw=FullStop
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;
