/*
 * generated by Xtext
 */
package org.eclipse.xpect.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class XpectGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XpectFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.XpectFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXpectFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cMembersAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cMembersTextParserRuleCall_1_0_0_0 = (RuleCall)cMembersAssignment_1_0_0.eContents().get(0);
		private final Assignment cMembersAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cMembersMemberParserRuleCall_1_0_1_0 = (RuleCall)cMembersAssignment_1_0_1.eContents().get(0);
		private final Assignment cMembersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMembersTextParserRuleCall_1_1_0 = (RuleCall)cMembersAssignment_1_1.eContents().get(0);
		
		//XpectFile:
		//	{XpectFile} ((members+=Text members+=Member)* members+=Text)?;
		@Override public ParserRule getRule() { return rule; }

		//{XpectFile} ((members+=Text members+=Member)* members+=Text)?
		public Group getGroup() { return cGroup; }

		//{XpectFile}
		public Action getXpectFileAction_0() { return cXpectFileAction_0; }

		//((members+=Text members+=Member)* members+=Text)?
		public Group getGroup_1() { return cGroup_1; }

		//(members+=Text members+=Member)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//members+=Text
		public Assignment getMembersAssignment_1_0_0() { return cMembersAssignment_1_0_0; }

		//Text
		public RuleCall getMembersTextParserRuleCall_1_0_0_0() { return cMembersTextParserRuleCall_1_0_0_0; }

		//members+=Member
		public Assignment getMembersAssignment_1_0_1() { return cMembersAssignment_1_0_1; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_1_0_1_0() { return cMembersMemberParserRuleCall_1_0_1_0; }

		//members+=Text
		public Assignment getMembersAssignment_1_1() { return cMembersAssignment_1_1; }

		//Text
		public RuleCall getMembersTextParserRuleCall_1_1_0() { return cMembersTextParserRuleCall_1_1_0; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLexicalspace_SetupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLexicalspace_InvocationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXpectIgnoreParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Member:
		//	Lexicalspace_Setup | Lexicalspace_Invocation | XpectIgnore;
		@Override public ParserRule getRule() { return rule; }

		//Lexicalspace_Setup | Lexicalspace_Invocation | XpectIgnore
		public Alternatives getAlternatives() { return cAlternatives; }

		//Lexicalspace_Setup
		public RuleCall getLexicalspace_SetupParserRuleCall_0() { return cLexicalspace_SetupParserRuleCall_0; }

		//Lexicalspace_Invocation
		public RuleCall getLexicalspace_InvocationParserRuleCall_1() { return cLexicalspace_InvocationParserRuleCall_1; }

		//XpectIgnore
		public RuleCall getXpectIgnoreParserRuleCall_2() { return cXpectIgnoreParserRuleCall_2; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.Text");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextAnyTextParserRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//Text:
		//	text=AnyText;
		@Override public ParserRule getRule() { return rule; }

		//text=AnyText
		public Assignment getTextAssignment() { return cTextAssignment; }

		//AnyText
		public RuleCall getTextAnyTextParserRuleCall_0() { return cTextAnyTextParserRuleCall_0; }
	}

	public class Lexicalspace_SetupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.Lexicalspace_Setup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXpectTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cXPECT_SETUPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredSuiteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDeclaredSuiteJvmDeclaredTypeCrossReference_2_0 = (CrossReference)cDeclaredSuiteAssignment_2.eContents().get(0);
		private final RuleCall cDeclaredSuiteJvmDeclaredTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDeclaredSuiteJvmDeclaredTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cAssignmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_3_0 = (RuleCall)cAssignmentsAssignment_3.eContents().get(0);
		private final Keyword cEND_SETUPKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Lexicalspace_Setup XpectTest hidden(WS, ML_COMMENT, SL_COMMENT):
		//	{XpectTest} "XPECT_SETUP" declaredSuite=[types::JvmDeclaredType|QualifiedName]?
		//	assignments+=Assignment*
		//	"END_SETUP"
		@Override public ParserRule getRule() { return rule; }

		//{XpectTest} "XPECT_SETUP" declaredSuite=[types::JvmDeclaredType|QualifiedName]? assignments+=Assignment* "END_SETUP"
		public Group getGroup() { return cGroup; }

		//{XpectTest}
		public Action getXpectTestAction_0() { return cXpectTestAction_0; }

		//"XPECT_SETUP"
		public Keyword getXPECT_SETUPKeyword_1() { return cXPECT_SETUPKeyword_1; }

		//declaredSuite=[types::JvmDeclaredType|QualifiedName]?
		public Assignment getDeclaredSuiteAssignment_2() { return cDeclaredSuiteAssignment_2; }

		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getDeclaredSuiteJvmDeclaredTypeCrossReference_2_0() { return cDeclaredSuiteJvmDeclaredTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getDeclaredSuiteJvmDeclaredTypeQualifiedNameParserRuleCall_2_0_1() { return cDeclaredSuiteJvmDeclaredTypeQualifiedNameParserRuleCall_2_0_1; }

		//assignments+=Assignment*
		public Assignment getAssignmentsAssignment_3() { return cAssignmentsAssignment_3; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_3_0() { return cAssignmentsAssignmentParserRuleCall_3_0; }

		//"END_SETUP"
		public Keyword getEND_SETUPKeyword_4() { return cEND_SETUPKeyword_4; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaredTargetAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cDeclaredTargetJvmOperationCrossReference_0_0_0 = (CrossReference)cDeclaredTargetAssignment_0_0.eContents().get(0);
		private final RuleCall cDeclaredTargetJvmOperationIDTerminalRuleCall_0_0_0_1 = (RuleCall)cDeclaredTargetJvmOperationCrossReference_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueComponentLongParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Assignment:
		//	declaredTarget=[types::JvmOperation] "=" value=Value | value=ComponentLong;
		@Override public ParserRule getRule() { return rule; }

		//declaredTarget=[types::JvmOperation] "=" value=Value | value=ComponentLong
		public Alternatives getAlternatives() { return cAlternatives; }

		//declaredTarget=[types::JvmOperation] "=" value=Value
		public Group getGroup_0() { return cGroup_0; }

		//declaredTarget=[types::JvmOperation]
		public Assignment getDeclaredTargetAssignment_0_0() { return cDeclaredTargetAssignment_0_0; }

		//[types::JvmOperation]
		public CrossReference getDeclaredTargetJvmOperationCrossReference_0_0_0() { return cDeclaredTargetJvmOperationCrossReference_0_0_0; }

		//ID
		public RuleCall getDeclaredTargetJvmOperationIDTerminalRuleCall_0_0_0_1() { return cDeclaredTargetJvmOperationIDTerminalRuleCall_0_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//value=Value
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_0_2_0() { return cValueValueParserRuleCall_0_2_0; }

		//value=ComponentLong
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//ComponentLong
		public RuleCall getValueComponentLongParserRuleCall_1_0() { return cValueComponentLongParserRuleCall_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComponentInlineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	Literal | ClassLiteral | ComponentInline;
		@Override public ParserRule getRule() { return rule; }

		//Literal | ClassLiteral | ComponentInline
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//ClassLiteral
		public RuleCall getClassLiteralParserRuleCall_1() { return cClassLiteralParserRuleCall_1; }

		//ComponentInline
		public RuleCall getComponentInlineParserRuleCall_2() { return cComponentInlineParserRuleCall_2; }
	}

	public class ComponentLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.ComponentLong");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cComponentClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cComponentClassJvmDeclaredTypeCrossReference_1_0 = (CrossReference)cComponentClassAssignment_1.eContents().get(0);
		private final RuleCall cComponentClassJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cComponentClassJvmDeclaredTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersLiteralParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAssignmentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_3_1_0 = (RuleCall)cAssignmentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ComponentLong Component:
		//	{Component} componentClass=[types::JvmDeclaredType|QualifiedName] parameters+=Literal* ("{" assignments+=Assignment*
		//	"}")
		@Override public ParserRule getRule() { return rule; }

		//{Component} componentClass=[types::JvmDeclaredType|QualifiedName] parameters+=Literal* ("{" assignments+=Assignment*
		//"}")
		public Group getGroup() { return cGroup; }

		//{Component}
		public Action getComponentAction_0() { return cComponentAction_0; }

		//componentClass=[types::JvmDeclaredType|QualifiedName]
		public Assignment getComponentClassAssignment_1() { return cComponentClassAssignment_1; }

		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getComponentClassJvmDeclaredTypeCrossReference_1_0() { return cComponentClassJvmDeclaredTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getComponentClassJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_1() { return cComponentClassJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_1; }

		//parameters+=Literal*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//Literal
		public RuleCall getParametersLiteralParserRuleCall_2_0() { return cParametersLiteralParserRuleCall_2_0; }

		//("{" assignments+=Assignment* "}")
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//assignments+=Assignment*
		public Assignment getAssignmentsAssignment_3_1() { return cAssignmentsAssignment_3_1; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_3_1_0() { return cAssignmentsAssignmentParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class ComponentInlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.ComponentInline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cComponentClassAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cComponentClassJvmDeclaredTypeCrossReference_1_0_0 = (CrossReference)cComponentClassAssignment_1_0.eContents().get(0);
		private final RuleCall cComponentClassJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_0_1 = (RuleCall)cComponentClassJvmDeclaredTypeCrossReference_1_0_0.eContents().get(1);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersLiteralParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAssignmentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_2_1_0 = (RuleCall)cAssignmentsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ComponentInline Component:
		//	{Component} (componentClass=[types::JvmDeclaredType|QualifiedName] parameters+=Literal*)? ("{"
		//	assignments+=Assignment* "}")
		@Override public ParserRule getRule() { return rule; }

		//{Component} (componentClass=[types::JvmDeclaredType|QualifiedName] parameters+=Literal*)? ("{" assignments+=Assignment*
		//"}")
		public Group getGroup() { return cGroup; }

		//{Component}
		public Action getComponentAction_0() { return cComponentAction_0; }

		//(componentClass=[types::JvmDeclaredType|QualifiedName] parameters+=Literal*)?
		public Group getGroup_1() { return cGroup_1; }

		//componentClass=[types::JvmDeclaredType|QualifiedName]
		public Assignment getComponentClassAssignment_1_0() { return cComponentClassAssignment_1_0; }

		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getComponentClassJvmDeclaredTypeCrossReference_1_0_0() { return cComponentClassJvmDeclaredTypeCrossReference_1_0_0; }

		//QualifiedName
		public RuleCall getComponentClassJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_0_1() { return cComponentClassJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_0_1; }

		//parameters+=Literal*
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Literal
		public RuleCall getParametersLiteralParserRuleCall_1_1_0() { return cParametersLiteralParserRuleCall_1_1_0; }

		//("{" assignments+=Assignment* "}")
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//assignments+=Assignment*
		public Assignment getAssignmentsAssignment_2_1() { return cAssignmentsAssignment_2_1; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_2_1_0() { return cAssignmentsAssignmentParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_1_0_0 = (Keyword)cValueAssignment_0_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Literal:
		//	{BooleanLiteral} (value?="true" | "false") | {IntLiteral} value=INT | {StringLiteral} value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{BooleanLiteral} (value?="true" | "false") | {IntLiteral} value=INT | {StringLiteral} value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BooleanLiteral} (value?="true" | "false")
		public Group getGroup_0() { return cGroup_0; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0_0() { return cBooleanLiteralAction_0_0; }

		//(value?="true" | "false")
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//value?="true"
		public Assignment getValueAssignment_0_1_0() { return cValueAssignment_0_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_0_1_0_0() { return cValueTrueKeyword_0_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_0_1_1() { return cFalseKeyword_0_1_1; }

		//{IntLiteral} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{IntLiteral}
		public Action getIntLiteralAction_1_0() { return cIntLiteralAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{StringLiteral} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{StringLiteral}
		public Action getStringLiteralAction_2_0() { return cStringLiteralAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
	}

	public class ClassLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.ClassLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeJvmDeclaredTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeJvmDeclaredTypeCrossReference_1_0.eContents().get(1);
		
		//ClassLiteral:
		//	{ClassLiteral} type=[types::JvmDeclaredType|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//{ClassLiteral} type=[types::JvmDeclaredType|QualifiedName]
		public Group getGroup() { return cGroup; }

		//{ClassLiteral}
		public Action getClassLiteralAction_0() { return cClassLiteralAction_0; }

		//type=[types::JvmDeclaredType|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getTypeJvmDeclaredTypeCrossReference_1_0() { return cTypeJvmDeclaredTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_1; }
	}

	public class XpectIgnoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.XpectIgnore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXpectIgnoreAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cXPECT_IGNOREKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//XpectIgnore:
		//	{XpectIgnore} "XPECT_IGNORE";
		@Override public ParserRule getRule() { return rule; }

		//{XpectIgnore} "XPECT_IGNORE"
		public Group getGroup() { return cGroup; }

		//{XpectIgnore}
		public Action getXpectIgnoreAction_0() { return cXpectIgnoreAction_0; }

		//"XPECT_IGNORE"
		public Keyword getXPECT_IGNOREKeyword_1() { return cXPECT_IGNOREKeyword_1; }
	}

	public class Lexicalspace_InvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.Lexicalspace_Invocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXPECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIgnoreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIgnoreExclamationMarkKeyword_1_0 = (Keyword)cIgnoreAssignment_1.eContents().get(0);
		private final Assignment cFixmeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cFixmeFIXMEKeyword_2_0 = (Keyword)cFixmeAssignment_2.eContents().get(0);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMethodXjmXpectMethodCrossReference_3_0 = (CrossReference)cMethodAssignment_3.eContents().get(0);
		private final RuleCall cMethodXjmXpectMethodINVOCATIONTerminalRuleCall_3_0_1 = (RuleCall)cMethodXjmXpectMethodCrossReference_3_0.eContents().get(1);
		
		//Lexicalspace_Invocation XpectInvocation hidden(WS, ML_COMMENT, SL_COMMENT):
		//	"XPECT" ignore?="!"? fixme?="FIXME"? method=[xjm::XjmXpectMethod|INVOCATION]
		@Override public ParserRule getRule() { return rule; }

		//"XPECT" ignore?="!"? fixme?="FIXME"? method=[xjm::XjmXpectMethod|INVOCATION]
		public Group getGroup() { return cGroup; }

		//"XPECT"
		public Keyword getXPECTKeyword_0() { return cXPECTKeyword_0; }

		//ignore?="!"?
		public Assignment getIgnoreAssignment_1() { return cIgnoreAssignment_1; }

		//"!"
		public Keyword getIgnoreExclamationMarkKeyword_1_0() { return cIgnoreExclamationMarkKeyword_1_0; }

		//fixme?="FIXME"?
		public Assignment getFixmeAssignment_2() { return cFixmeAssignment_2; }

		//"FIXME"
		public Keyword getFixmeFIXMEKeyword_2_0() { return cFixmeFIXMEKeyword_2_0; }

		//method=[xjm::XjmXpectMethod|INVOCATION]
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }

		//[xjm::XjmXpectMethod|INVOCATION]
		public CrossReference getMethodXjmXpectMethodCrossReference_3_0() { return cMethodXjmXpectMethodCrossReference_3_0; }

		//INVOCATION
		public RuleCall getMethodXjmXpectMethodINVOCATIONTerminalRuleCall_3_0_1() { return cMethodXjmXpectMethodINVOCATIONTerminalRuleCall_3_0_1; }
	}

	public class AnyTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.AnyText");
		private final RuleCall cANY_OTHERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnyText:
		//	ANY_OTHER+;
		@Override public ParserRule getRule() { return rule; }

		//ANY_OTHER+
		public RuleCall getANY_OTHERTerminalRuleCall() { return cANY_OTHERTerminalRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final XpectFileElements pXpectFile;
	private final MemberElements pMember;
	private final TextElements pText;
	private final Lexicalspace_SetupElements pLexicalspace_Setup;
	private final AssignmentElements pAssignment;
	private final ValueElements pValue;
	private final ComponentLongElements pComponentLong;
	private final ComponentInlineElements pComponentInline;
	private final LiteralElements pLiteral;
	private final ClassLiteralElements pClassLiteral;
	private final XpectIgnoreElements pXpectIgnore;
	private final Lexicalspace_InvocationElements pLexicalspace_Invocation;
	private final AnyTextElements pAnyText;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tID;
	private final TerminalRule tINVOCATION;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public XpectGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pXpectFile = new XpectFileElements();
		this.pMember = new MemberElements();
		this.pText = new TextElements();
		this.pLexicalspace_Setup = new Lexicalspace_SetupElements();
		this.pAssignment = new AssignmentElements();
		this.pValue = new ValueElements();
		this.pComponentLong = new ComponentLongElements();
		this.pComponentInline = new ComponentInlineElements();
		this.pLiteral = new LiteralElements();
		this.pClassLiteral = new ClassLiteralElements();
		this.pXpectIgnore = new XpectIgnoreElements();
		this.pLexicalspace_Invocation = new Lexicalspace_InvocationElements();
		this.pAnyText = new AnyTextElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.ID");
		this.tINVOCATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.INVOCATION");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xpect.Xpect.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xpect.Xpect".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//XpectFile:
	//	{XpectFile} ((members+=Text members+=Member)* members+=Text)?;
	public XpectFileElements getXpectFileAccess() {
		return pXpectFile;
	}
	
	public ParserRule getXpectFileRule() {
		return getXpectFileAccess().getRule();
	}

	//Member:
	//	Lexicalspace_Setup | Lexicalspace_Invocation | XpectIgnore;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Text:
	//	text=AnyText;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//Lexicalspace_Setup XpectTest hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{XpectTest} "XPECT_SETUP" declaredSuite=[types::JvmDeclaredType|QualifiedName]?
	//	assignments+=Assignment*
	//	"END_SETUP"
	public Lexicalspace_SetupElements getLexicalspace_SetupAccess() {
		return pLexicalspace_Setup;
	}
	
	public ParserRule getLexicalspace_SetupRule() {
		return getLexicalspace_SetupAccess().getRule();
	}

	//Assignment:
	//	declaredTarget=[types::JvmOperation] "=" value=Value | value=ComponentLong;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Value:
	//	Literal | ClassLiteral | ComponentInline;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ComponentLong Component:
	//	{Component} componentClass=[types::JvmDeclaredType|QualifiedName] parameters+=Literal* ("{" assignments+=Assignment*
	//	"}")
	public ComponentLongElements getComponentLongAccess() {
		return pComponentLong;
	}
	
	public ParserRule getComponentLongRule() {
		return getComponentLongAccess().getRule();
	}

	//ComponentInline Component:
	//	{Component} (componentClass=[types::JvmDeclaredType|QualifiedName] parameters+=Literal*)? ("{"
	//	assignments+=Assignment* "}")
	public ComponentInlineElements getComponentInlineAccess() {
		return pComponentInline;
	}
	
	public ParserRule getComponentInlineRule() {
		return getComponentInlineAccess().getRule();
	}

	//Literal:
	//	{BooleanLiteral} (value?="true" | "false") | {IntLiteral} value=INT | {StringLiteral} value=STRING;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//ClassLiteral:
	//	{ClassLiteral} type=[types::JvmDeclaredType|QualifiedName];
	public ClassLiteralElements getClassLiteralAccess() {
		return pClassLiteral;
	}
	
	public ParserRule getClassLiteralRule() {
		return getClassLiteralAccess().getRule();
	}

	//XpectIgnore:
	//	{XpectIgnore} "XPECT_IGNORE";
	public XpectIgnoreElements getXpectIgnoreAccess() {
		return pXpectIgnore;
	}
	
	public ParserRule getXpectIgnoreRule() {
		return getXpectIgnoreAccess().getRule();
	}

	//Lexicalspace_Invocation XpectInvocation hidden(WS, ML_COMMENT, SL_COMMENT):
	//	"XPECT" ignore?="!"? fixme?="FIXME"? method=[xjm::XjmXpectMethod|INVOCATION]
	public Lexicalspace_InvocationElements getLexicalspace_InvocationAccess() {
		return pLexicalspace_Invocation;
	}
	
	public ParserRule getLexicalspace_InvocationRule() {
		return getLexicalspace_InvocationAccess().getRule();
	}

	//AnyText:
	//	ANY_OTHER+;
	public AnyTextElements getAnyTextAccess() {
		return pAnyText;
	}
	
	public ParserRule getAnyTextRule() {
		return getAnyTextAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INVOCATION:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getINVOCATIONRule() {
		return tINVOCATION;
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
