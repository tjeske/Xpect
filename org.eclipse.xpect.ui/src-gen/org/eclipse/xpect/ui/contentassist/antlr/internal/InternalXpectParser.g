/*
 * generated by Xtext
 */
parser grammar InternalXpectParser;

options {
	tokenVocab=InternalXpectLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package org.eclipse.xpect.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.xpect.services.XpectGrammarAccess;

}

@members {
 
 	private XpectGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("True", "'true'");
		tokenNameToValue.put("FIXME", "'FIXME'");
		tokenNameToValue.put("XPECT", "'XPECT'");
		tokenNameToValue.put("False", "'false'");
		tokenNameToValue.put("END_SETUP", "'END_SETUP'");
		tokenNameToValue.put("XPECT_SETUP", "'XPECT_SETUP'");
		tokenNameToValue.put("XPECT_IGNORE", "'XPECT_IGNORE'");
 	}
 	
    public void setGrammarAccess(XpectGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleXpectFile
entryRuleXpectFile 
:
{ before(grammarAccess.getXpectFileRule()); }
	 ruleXpectFile
{ after(grammarAccess.getXpectFileRule()); } 
	 EOF 
;

// Rule XpectFile
ruleXpectFile 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXpectFileAccess().getGroup()); }
(rule__XpectFile__Group__0)
{ after(grammarAccess.getXpectFileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMember
entryRuleMember 
:
{ before(grammarAccess.getMemberRule()); }
	 ruleMember
{ after(grammarAccess.getMemberRule()); } 
	 EOF 
;

// Rule Member
ruleMember 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMemberAccess().getAlternatives()); }
(rule__Member__Alternatives)
{ after(grammarAccess.getMemberAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleText
entryRuleText 
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTextAccess().getTextAssignment()); }
(rule__Text__TextAssignment)
{ after(grammarAccess.getTextAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLexicalspace_Setup
entryRuleLexicalspace_Setup 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getLexicalspace_SetupRule()); }
	 ruleLexicalspace_Setup
{ after(grammarAccess.getLexicalspace_SetupRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Lexicalspace_Setup
ruleLexicalspace_Setup 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLexicalspace_SetupAccess().getGroup()); }
(rule__Lexicalspace_Setup__Group__0)
{ after(grammarAccess.getLexicalspace_SetupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAssignmentAccess().getAlternatives()); }
(rule__Assignment__Alternatives)
{ after(grammarAccess.getAssignmentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentLong
entryRuleComponentLong 
:
{ before(grammarAccess.getComponentLongRule()); }
	 ruleComponentLong
{ after(grammarAccess.getComponentLongRule()); } 
	 EOF 
;

// Rule ComponentLong
ruleComponentLong 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComponentLongAccess().getGroup()); }
(rule__ComponentLong__Group__0)
{ after(grammarAccess.getComponentLongAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentInline
entryRuleComponentInline 
:
{ before(grammarAccess.getComponentInlineRule()); }
	 ruleComponentInline
{ after(grammarAccess.getComponentInlineRule()); } 
	 EOF 
;

// Rule ComponentInline
ruleComponentInline 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComponentInlineAccess().getGroup()); }
(rule__ComponentInline__Group__0)
{ after(grammarAccess.getComponentInlineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassLiteral
entryRuleClassLiteral 
:
{ before(grammarAccess.getClassLiteralRule()); }
	 ruleClassLiteral
{ after(grammarAccess.getClassLiteralRule()); } 
	 EOF 
;

// Rule ClassLiteral
ruleClassLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getClassLiteralAccess().getGroup()); }
(rule__ClassLiteral__Group__0)
{ after(grammarAccess.getClassLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXpectIgnore
entryRuleXpectIgnore 
:
{ before(grammarAccess.getXpectIgnoreRule()); }
	 ruleXpectIgnore
{ after(grammarAccess.getXpectIgnoreRule()); } 
	 EOF 
;

// Rule XpectIgnore
ruleXpectIgnore 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getXpectIgnoreAccess().getGroup()); }
(rule__XpectIgnore__Group__0)
{ after(grammarAccess.getXpectIgnoreAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLexicalspace_Invocation
entryRuleLexicalspace_Invocation 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getLexicalspace_InvocationRule()); }
	 ruleLexicalspace_Invocation
{ after(grammarAccess.getLexicalspace_InvocationRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Lexicalspace_Invocation
ruleLexicalspace_Invocation 
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getGroup()); }
(rule__Lexicalspace_Invocation__Group__0)
{ after(grammarAccess.getLexicalspace_InvocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleAnyText
entryRuleAnyText 
:
{ before(grammarAccess.getAnyTextRule()); }
	 ruleAnyText
{ after(grammarAccess.getAnyTextRule()); } 
	 EOF 
;

// Rule AnyText
ruleAnyText 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
(
{ before(grammarAccess.getAnyTextAccess().getANY_OTHERTerminalRuleCall()); }
(	RULE_ANY_OTHER)
{ after(grammarAccess.getAnyTextAccess().getANY_OTHERTerminalRuleCall()); }
)
(
{ before(grammarAccess.getAnyTextAccess().getANY_OTHERTerminalRuleCall()); }
(	RULE_ANY_OTHER)*
{ after(grammarAccess.getAnyTextAccess().getANY_OTHERTerminalRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Member__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberAccess().getLexicalspace_SetupParserRuleCall_0()); }
	ruleLexicalspace_Setup
{ after(grammarAccess.getMemberAccess().getLexicalspace_SetupParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMemberAccess().getLexicalspace_InvocationParserRuleCall_1()); }
	ruleLexicalspace_Invocation
{ after(grammarAccess.getMemberAccess().getLexicalspace_InvocationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMemberAccess().getXpectIgnoreParserRuleCall_2()); }
	ruleXpectIgnore
{ after(grammarAccess.getMemberAccess().getXpectIgnoreParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getGroup_0()); }
(rule__Assignment__Group_0__0)
{ after(grammarAccess.getAssignmentAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_1()); }
(rule__Assignment__ValueAssignment_1)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getValueAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getClassLiteralParserRuleCall_1()); }
	ruleClassLiteral
{ after(grammarAccess.getValueAccess().getClassLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getComponentInlineParserRuleCall_2()); }
	ruleComponentInline
{ after(grammarAccess.getValueAccess().getComponentInlineParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getGroup_0()); }
(rule__Literal__Group_0__0)
{ after(grammarAccess.getLiteralAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_1()); }
(rule__Literal__Group_1__0)
{ after(grammarAccess.getLiteralAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_2()); }
(rule__Literal__Group_2__0)
{ after(grammarAccess.getLiteralAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueAssignment_0_1_0()); }
(rule__Literal__ValueAssignment_0_1_0)
{ after(grammarAccess.getLiteralAccess().getValueAssignment_0_1_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFalseKeyword_0_1_1()); }

	False 

{ after(grammarAccess.getLiteralAccess().getFalseKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__XpectFile__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XpectFile__Group__0__Impl
	rule__XpectFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpectFile__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectFileAccess().getXpectFileAction_0()); }
(

)
{ after(grammarAccess.getXpectFileAccess().getXpectFileAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XpectFile__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XpectFile__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpectFile__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectFileAccess().getGroup_1()); }
(rule__XpectFile__Group_1__0)?
{ after(grammarAccess.getXpectFileAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XpectFile__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XpectFile__Group_1__0__Impl
	rule__XpectFile__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpectFile__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectFileAccess().getGroup_1_0()); }
(rule__XpectFile__Group_1_0__0)*
{ after(grammarAccess.getXpectFileAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XpectFile__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XpectFile__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpectFile__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectFileAccess().getMembersAssignment_1_1()); }
(rule__XpectFile__MembersAssignment_1_1)
{ after(grammarAccess.getXpectFileAccess().getMembersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XpectFile__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XpectFile__Group_1_0__0__Impl
	rule__XpectFile__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpectFile__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectFileAccess().getMembersAssignment_1_0_0()); }
(rule__XpectFile__MembersAssignment_1_0_0)
{ after(grammarAccess.getXpectFileAccess().getMembersAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XpectFile__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XpectFile__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpectFile__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectFileAccess().getMembersAssignment_1_0_1()); }
(rule__XpectFile__MembersAssignment_1_0_1)
{ after(grammarAccess.getXpectFileAccess().getMembersAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Lexicalspace_Setup__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lexicalspace_Setup__Group__0__Impl
	rule__Lexicalspace_Setup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Setup__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_SetupAccess().getXpectTestAction_0()); }
(

)
{ after(grammarAccess.getLexicalspace_SetupAccess().getXpectTestAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lexicalspace_Setup__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lexicalspace_Setup__Group__1__Impl
	rule__Lexicalspace_Setup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Setup__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_SetupAccess().getXPECT_SETUPKeyword_1()); }

	XPECT_SETUP 

{ after(grammarAccess.getLexicalspace_SetupAccess().getXPECT_SETUPKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lexicalspace_Setup__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lexicalspace_Setup__Group__2__Impl
	rule__Lexicalspace_Setup__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Setup__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_SetupAccess().getDeclaredSuiteAssignment_2()); }
(rule__Lexicalspace_Setup__DeclaredSuiteAssignment_2)?
{ after(grammarAccess.getLexicalspace_SetupAccess().getDeclaredSuiteAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lexicalspace_Setup__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lexicalspace_Setup__Group__3__Impl
	rule__Lexicalspace_Setup__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Setup__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_SetupAccess().getAssignmentsAssignment_3()); }
(rule__Lexicalspace_Setup__AssignmentsAssignment_3)*
{ after(grammarAccess.getLexicalspace_SetupAccess().getAssignmentsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lexicalspace_Setup__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lexicalspace_Setup__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Setup__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_SetupAccess().getEND_SETUPKeyword_4()); }

	END_SETUP 

{ after(grammarAccess.getLexicalspace_SetupAccess().getEND_SETUPKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Assignment__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_0__0__Impl
	rule__Assignment__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getDeclaredTargetAssignment_0_0()); }
(rule__Assignment__DeclaredTargetAssignment_0_0)
{ after(grammarAccess.getAssignmentAccess().getDeclaredTargetAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_0__1__Impl
	rule__Assignment__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_0_1()); }

	EqualsSign 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_0_2()); }
(rule__Assignment__ValueAssignment_0_2)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComponentLong__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentLong__Group__0__Impl
	rule__ComponentLong__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentLong__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentLongAccess().getComponentAction_0()); }
(

)
{ after(grammarAccess.getComponentLongAccess().getComponentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentLong__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentLong__Group__1__Impl
	rule__ComponentLong__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentLong__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentLongAccess().getComponentClassAssignment_1()); }
(rule__ComponentLong__ComponentClassAssignment_1)
{ after(grammarAccess.getComponentLongAccess().getComponentClassAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentLong__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentLong__Group__2__Impl
	rule__ComponentLong__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentLong__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentLongAccess().getParametersAssignment_2()); }
(rule__ComponentLong__ParametersAssignment_2)*
{ after(grammarAccess.getComponentLongAccess().getParametersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentLong__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentLong__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentLong__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentLongAccess().getGroup_3()); }
(rule__ComponentLong__Group_3__0)
{ after(grammarAccess.getComponentLongAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ComponentLong__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentLong__Group_3__0__Impl
	rule__ComponentLong__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentLong__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentLongAccess().getLeftCurlyBracketKeyword_3_0()); }

	LeftCurlyBracket 

{ after(grammarAccess.getComponentLongAccess().getLeftCurlyBracketKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentLong__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentLong__Group_3__1__Impl
	rule__ComponentLong__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentLong__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentLongAccess().getAssignmentsAssignment_3_1()); }
(rule__ComponentLong__AssignmentsAssignment_3_1)*
{ after(grammarAccess.getComponentLongAccess().getAssignmentsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentLong__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentLong__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentLong__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentLongAccess().getRightCurlyBracketKeyword_3_2()); }

	RightCurlyBracket 

{ after(grammarAccess.getComponentLongAccess().getRightCurlyBracketKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComponentInline__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInline__Group__0__Impl
	rule__ComponentInline__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getComponentAction_0()); }
(

)
{ after(grammarAccess.getComponentInlineAccess().getComponentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInline__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInline__Group__1__Impl
	rule__ComponentInline__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getGroup_1()); }
(rule__ComponentInline__Group_1__0)?
{ after(grammarAccess.getComponentInlineAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInline__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInline__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getGroup_2()); }
(rule__ComponentInline__Group_2__0)
{ after(grammarAccess.getComponentInlineAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComponentInline__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInline__Group_1__0__Impl
	rule__ComponentInline__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getComponentClassAssignment_1_0()); }
(rule__ComponentInline__ComponentClassAssignment_1_0)
{ after(grammarAccess.getComponentInlineAccess().getComponentClassAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInline__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInline__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getParametersAssignment_1_1()); }
(rule__ComponentInline__ParametersAssignment_1_1)*
{ after(grammarAccess.getComponentInlineAccess().getParametersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentInline__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInline__Group_2__0__Impl
	rule__ComponentInline__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getLeftCurlyBracketKeyword_2_0()); }

	LeftCurlyBracket 

{ after(grammarAccess.getComponentInlineAccess().getLeftCurlyBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInline__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInline__Group_2__1__Impl
	rule__ComponentInline__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getAssignmentsAssignment_2_1()); }
(rule__ComponentInline__AssignmentsAssignment_2_1)*
{ after(grammarAccess.getComponentInlineAccess().getAssignmentsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInline__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInline__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getRightCurlyBracketKeyword_2_2()); }

	RightCurlyBracket 

{ after(grammarAccess.getComponentInlineAccess().getRightCurlyBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Literal__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_0__0__Impl
	rule__Literal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralAction_0_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives_0_1()); }
(rule__Literal__Alternatives_0_1)
{ after(grammarAccess.getLiteralAccess().getAlternatives_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_1__0__Impl
	rule__Literal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getIntLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getIntLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueAssignment_1_1()); }
(rule__Literal__ValueAssignment_1_1)
{ after(grammarAccess.getLiteralAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__0__Impl
	rule__Literal__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getStringLiteralAction_2_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getStringLiteralAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueAssignment_2_1()); }
(rule__Literal__ValueAssignment_2_1)
{ after(grammarAccess.getLiteralAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassLiteral__Group__0__Impl
	rule__ClassLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassLiteralAccess().getClassLiteralAction_0()); }
(

)
{ after(grammarAccess.getClassLiteralAccess().getClassLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassLiteralAccess().getTypeAssignment_1()); }
(rule__ClassLiteral__TypeAssignment_1)
{ after(grammarAccess.getClassLiteralAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XpectIgnore__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XpectIgnore__Group__0__Impl
	rule__XpectIgnore__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XpectIgnore__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectIgnoreAccess().getXpectIgnoreAction_0()); }
(

)
{ after(grammarAccess.getXpectIgnoreAccess().getXpectIgnoreAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XpectIgnore__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XpectIgnore__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XpectIgnore__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectIgnoreAccess().getXPECT_IGNOREKeyword_1()); }

	XPECT_IGNORE 

{ after(grammarAccess.getXpectIgnoreAccess().getXPECT_IGNOREKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Lexicalspace_Invocation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lexicalspace_Invocation__Group__0__Impl
	rule__Lexicalspace_Invocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Invocation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getXPECTKeyword_0()); }

	XPECT 

{ after(grammarAccess.getLexicalspace_InvocationAccess().getXPECTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lexicalspace_Invocation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lexicalspace_Invocation__Group__1__Impl
	rule__Lexicalspace_Invocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Invocation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getIgnoreAssignment_1()); }
(rule__Lexicalspace_Invocation__IgnoreAssignment_1)?
{ after(grammarAccess.getLexicalspace_InvocationAccess().getIgnoreAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lexicalspace_Invocation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lexicalspace_Invocation__Group__2__Impl
	rule__Lexicalspace_Invocation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Invocation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getFixmeAssignment_2()); }
(rule__Lexicalspace_Invocation__FixmeAssignment_2)?
{ after(grammarAccess.getLexicalspace_InvocationAccess().getFixmeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Lexicalspace_Invocation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Lexicalspace_Invocation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Invocation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getMethodAssignment_3()); }
(rule__Lexicalspace_Invocation__MethodAssignment_3)
{ after(grammarAccess.getLexicalspace_InvocationAccess().getMethodAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	FullStop 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__XpectFile__MembersAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectFileAccess().getMembersTextParserRuleCall_1_0_0_0()); }
	ruleText{ after(grammarAccess.getXpectFileAccess().getMembersTextParserRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XpectFile__MembersAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectFileAccess().getMembersMemberParserRuleCall_1_0_1_0()); }
	ruleMember{ after(grammarAccess.getXpectFileAccess().getMembersMemberParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XpectFile__MembersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXpectFileAccess().getMembersTextParserRuleCall_1_1_0()); }
	ruleText{ after(grammarAccess.getXpectFileAccess().getMembersTextParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Text__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextAccess().getTextAnyTextParserRuleCall_0()); }
	ruleAnyText{ after(grammarAccess.getTextAccess().getTextAnyTextParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Setup__DeclaredSuiteAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_SetupAccess().getDeclaredSuiteJvmDeclaredTypeCrossReference_2_0()); }
(
{ before(grammarAccess.getLexicalspace_SetupAccess().getDeclaredSuiteJvmDeclaredTypeQualifiedNameParserRuleCall_2_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getLexicalspace_SetupAccess().getDeclaredSuiteJvmDeclaredTypeQualifiedNameParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getLexicalspace_SetupAccess().getDeclaredSuiteJvmDeclaredTypeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Setup__AssignmentsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_SetupAccess().getAssignmentsAssignmentParserRuleCall_3_0()); }
	ruleAssignment{ after(grammarAccess.getLexicalspace_SetupAccess().getAssignmentsAssignmentParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__DeclaredTargetAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getDeclaredTargetJvmOperationCrossReference_0_0_0()); }
(
{ before(grammarAccess.getAssignmentAccess().getDeclaredTargetJvmOperationIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getDeclaredTargetJvmOperationIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getAssignmentAccess().getDeclaredTargetJvmOperationCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_0_2_0()); }
	ruleValue{ after(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueComponentLongParserRuleCall_1_0()); }
	ruleComponentLong{ after(grammarAccess.getAssignmentAccess().getValueComponentLongParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentLong__ComponentClassAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentLongAccess().getComponentClassJvmDeclaredTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getComponentLongAccess().getComponentClassJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getComponentLongAccess().getComponentClassJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getComponentLongAccess().getComponentClassJvmDeclaredTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentLong__ParametersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentLongAccess().getParametersLiteralParserRuleCall_2_0()); }
	ruleLiteral{ after(grammarAccess.getComponentLongAccess().getParametersLiteralParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentLong__AssignmentsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentLongAccess().getAssignmentsAssignmentParserRuleCall_3_1_0()); }
	ruleAssignment{ after(grammarAccess.getComponentLongAccess().getAssignmentsAssignmentParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__ComponentClassAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getComponentClassJvmDeclaredTypeCrossReference_1_0_0()); }
(
{ before(grammarAccess.getComponentInlineAccess().getComponentClassJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getComponentInlineAccess().getComponentClassJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_0_1()); }
)
{ after(grammarAccess.getComponentInlineAccess().getComponentClassJvmDeclaredTypeCrossReference_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__ParametersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getParametersLiteralParserRuleCall_1_1_0()); }
	ruleLiteral{ after(grammarAccess.getComponentInlineAccess().getParametersLiteralParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInline__AssignmentsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInlineAccess().getAssignmentsAssignmentParserRuleCall_2_1_0()); }
	ruleAssignment{ after(grammarAccess.getComponentInlineAccess().getAssignmentsAssignmentParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueTrueKeyword_0_1_0_0()); }
(
{ before(grammarAccess.getLiteralAccess().getValueTrueKeyword_0_1_0_0()); }

	True 

{ after(grammarAccess.getLiteralAccess().getValueTrueKeyword_0_1_0_0()); }
)

{ after(grammarAccess.getLiteralAccess().getValueTrueKeyword_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getLiteralAccess().getValueINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getLiteralAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassLiteral__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassLiteralAccess().getTypeJvmDeclaredTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getClassLiteralAccess().getTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getClassLiteralAccess().getTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getClassLiteralAccess().getTypeJvmDeclaredTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Invocation__IgnoreAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getIgnoreExclamationMarkKeyword_1_0()); }
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getIgnoreExclamationMarkKeyword_1_0()); }

	ExclamationMark 

{ after(grammarAccess.getLexicalspace_InvocationAccess().getIgnoreExclamationMarkKeyword_1_0()); }
)

{ after(grammarAccess.getLexicalspace_InvocationAccess().getIgnoreExclamationMarkKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Invocation__FixmeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getFixmeFIXMEKeyword_2_0()); }
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getFixmeFIXMEKeyword_2_0()); }

	FIXME 

{ after(grammarAccess.getLexicalspace_InvocationAccess().getFixmeFIXMEKeyword_2_0()); }
)

{ after(grammarAccess.getLexicalspace_InvocationAccess().getFixmeFIXMEKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Lexicalspace_Invocation__MethodAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getMethodXjmXpectMethodCrossReference_3_0()); }
(
{ before(grammarAccess.getLexicalspace_InvocationAccess().getMethodXjmXpectMethodINVOCATIONTerminalRuleCall_3_0_1()); }
	RULE_INVOCATION{ after(grammarAccess.getLexicalspace_InvocationAccess().getMethodXjmXpectMethodINVOCATIONTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getLexicalspace_InvocationAccess().getMethodXjmXpectMethodCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


