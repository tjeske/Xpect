/*
 * generated by Xtext 2.32.0-SNAPSHOT
 */
package org.eclipse.xpect.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xpect.ide.contentassist.antlr.internal.InternalXpectParser;
import org.eclipse.xpect.services.XpectGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class XpectParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XpectGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XpectGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
			builder.put(grammarAccess.getAssignmentAccess().getAlternatives(), "rule__Assignment__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives_0_1(), "rule__Literal__Alternatives_0_1");
			builder.put(grammarAccess.getXpectFileAccess().getGroup(), "rule__XpectFile__Group__0");
			builder.put(grammarAccess.getXpectFileAccess().getGroup_1(), "rule__XpectFile__Group_1__0");
			builder.put(grammarAccess.getXpectFileAccess().getGroup_1_0(), "rule__XpectFile__Group_1_0__0");
			builder.put(grammarAccess.getLexicalspace_SetupAccess().getGroup(), "rule__Lexicalspace_Setup__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup_0(), "rule__Assignment__Group_0__0");
			builder.put(grammarAccess.getComponentLongAccess().getGroup(), "rule__ComponentLong__Group__0");
			builder.put(grammarAccess.getComponentLongAccess().getGroup_3(), "rule__ComponentLong__Group_3__0");
			builder.put(grammarAccess.getComponentInlineAccess().getGroup(), "rule__ComponentInline__Group__0");
			builder.put(grammarAccess.getComponentInlineAccess().getGroup_1(), "rule__ComponentInline__Group_1__0");
			builder.put(grammarAccess.getComponentInlineAccess().getGroup_2(), "rule__ComponentInline__Group_2__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_0(), "rule__Literal__Group_0__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_1(), "rule__Literal__Group_1__0");
			builder.put(grammarAccess.getLiteralAccess().getGroup_2(), "rule__Literal__Group_2__0");
			builder.put(grammarAccess.getClassLiteralAccess().getGroup(), "rule__ClassLiteral__Group__0");
			builder.put(grammarAccess.getXpectIgnoreAccess().getGroup(), "rule__XpectIgnore__Group__0");
			builder.put(grammarAccess.getLexicalspace_InvocationAccess().getGroup(), "rule__Lexicalspace_Invocation__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getXpectFileAccess().getMembersAssignment_1_0_0(), "rule__XpectFile__MembersAssignment_1_0_0");
			builder.put(grammarAccess.getXpectFileAccess().getMembersAssignment_1_0_1(), "rule__XpectFile__MembersAssignment_1_0_1");
			builder.put(grammarAccess.getXpectFileAccess().getMembersAssignment_1_1(), "rule__XpectFile__MembersAssignment_1_1");
			builder.put(grammarAccess.getTextAccess().getTextAssignment(), "rule__Text__TextAssignment");
			builder.put(grammarAccess.getLexicalspace_SetupAccess().getDeclaredSuiteAssignment_2(), "rule__Lexicalspace_Setup__DeclaredSuiteAssignment_2");
			builder.put(grammarAccess.getLexicalspace_SetupAccess().getAssignmentsAssignment_3(), "rule__Lexicalspace_Setup__AssignmentsAssignment_3");
			builder.put(grammarAccess.getAssignmentAccess().getDeclaredTargetAssignment_0_0(), "rule__Assignment__DeclaredTargetAssignment_0_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_0_2(), "rule__Assignment__ValueAssignment_0_2");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_1(), "rule__Assignment__ValueAssignment_1");
			builder.put(grammarAccess.getComponentLongAccess().getComponentClassAssignment_1(), "rule__ComponentLong__ComponentClassAssignment_1");
			builder.put(grammarAccess.getComponentLongAccess().getParametersAssignment_2(), "rule__ComponentLong__ParametersAssignment_2");
			builder.put(grammarAccess.getComponentLongAccess().getAssignmentsAssignment_3_1(), "rule__ComponentLong__AssignmentsAssignment_3_1");
			builder.put(grammarAccess.getComponentInlineAccess().getComponentClassAssignment_1_0(), "rule__ComponentInline__ComponentClassAssignment_1_0");
			builder.put(grammarAccess.getComponentInlineAccess().getParametersAssignment_1_1(), "rule__ComponentInline__ParametersAssignment_1_1");
			builder.put(grammarAccess.getComponentInlineAccess().getAssignmentsAssignment_2_1(), "rule__ComponentInline__AssignmentsAssignment_2_1");
			builder.put(grammarAccess.getLiteralAccess().getValueAssignment_0_1_0(), "rule__Literal__ValueAssignment_0_1_0");
			builder.put(grammarAccess.getLiteralAccess().getValueAssignment_1_1(), "rule__Literal__ValueAssignment_1_1");
			builder.put(grammarAccess.getLiteralAccess().getValueAssignment_2_1(), "rule__Literal__ValueAssignment_2_1");
			builder.put(grammarAccess.getClassLiteralAccess().getTypeAssignment_1(), "rule__ClassLiteral__TypeAssignment_1");
			builder.put(grammarAccess.getLexicalspace_InvocationAccess().getIgnoreAssignment_1(), "rule__Lexicalspace_Invocation__IgnoreAssignment_1");
			builder.put(grammarAccess.getLexicalspace_InvocationAccess().getFixmeAssignment_2(), "rule__Lexicalspace_Invocation__FixmeAssignment_2");
			builder.put(grammarAccess.getLexicalspace_InvocationAccess().getMethodAssignment_3(), "rule__Lexicalspace_Invocation__MethodAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XpectGrammarAccess grammarAccess;

	@Override
	protected InternalXpectParser createParser() {
		InternalXpectParser result = new InternalXpectParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}

	public XpectGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XpectGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
